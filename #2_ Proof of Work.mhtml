From: <Saved by Blink>
Snapshot-Content-Location: https://lhartikk.github.io/jekyll/update/2017/07/13/chapter2.html
Subject: #2: Proof of Work
Date: Tue, 14 Sep 2021 14:32:12 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--4wtXzPGbgXDuynCt5x0RSf5ROLbAFwH0HvanxjwzH5----"


------MultipartBoundary--4wtXzPGbgXDuynCt5x0RSf5ROLbAFwH0HvanxjwzH5----
Content-Type: text/html
Content-ID: <frame-F2028CE576B51828DD44A30C67CE8DE1@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://lhartikk.github.io/jekyll/update/2017/07/13/chapter2.html

<!DOCTYPE html><html lang=3D"en"><head><meta http-equiv=3D"Content-Type" co=
ntent=3D"text/html; charset=3DUTF-8">
 =20
  <meta http-equiv=3D"X-UA-Compatible" content=3D"IE=3Dedge">
  <meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=3D=
1">

  <title>#2: Proof of Work</title>
  <meta name=3D"description" content=3D"Overview In this chapter we will im=
plement a simple Proof-of-Work scheme to the toy blockchain version. In the=
 chapter1 version anyone could add a block to t...">
  <meta property=3D"og:title" content=3D"Naivecoin: a tutorial for building=
 a cryptocurrency">
  <meta property=3D"og:image" content=3D"http://lhartikk.github.io/assets/b=
lockchain.png">
  <link rel=3D"stylesheet" href=3D"https://lhartikk.github.io/assets/main.c=
ss">
  <link rel=3D"canonical" href=3D"https://lhartikk.github.io/jekyll/update/=
2017/07/13/chapter2.html">
  <link rel=3D"alternate" type=3D"application/rss+xml" title=3D"Naivecoin: =
a tutorial for building a cryptocurrency" href=3D"https://lhartikk.github.i=
o/feed.xml">
 =20
<!-- Global site tag (gtag.js) - Google Analytics -->


</head>


  <body>

    <header class=3D"site-header" role=3D"banner">

  <div class=3D"wrapper">
   =20
   =20
    <a class=3D"site-title" href=3D"https://lhartikk.github.io/">Naivecoin:=
 a tutorial for building a cryptocurrency</a>
 =20
   =20
      <nav class=3D"site-nav">
        <input type=3D"checkbox" id=3D"nav-trigger" class=3D"nav-trigger">
        <label for=3D"nav-trigger">
          <span class=3D"menu-icon">
            <svg viewBox=3D"0 0 18 15" width=3D"18px" height=3D"15px">
              <path fill=3D"#424242" d=3D"M18,1.484c0,0.82-0.665,1.484-1.48=
4,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.0=
31C17.335,0,18,0.665,18,1.484L18,1.484z"></path>
              <path fill=3D"#424242" d=3D"M18,7.516C18,8.335,17.335,9,16.51=
6,9H1.484C0.665,9,0,8.335,0,7.516l0,0c0-0.82,0.665-1.484,1.484-1.484 h15.03=
1C17.335,6.031,18,6.696,18,7.516L18,7.516z"></path>
              <path fill=3D"#424242" d=3D"M18,13.516C18,14.335,17.335,15,16=
.516,15H1.484C0.665,15,0,14.335,0,13.516l0,0 c0-0.82,0.665-1.484,1.484-1.48=
4h15.031C17.335,12.031,18,12.696,18,13.516L18,13.516z"></path>
            </svg>
          </span>
        </label>

        <div class=3D"trigger">
         =20
           =20
           =20
         =20
           =20
           =20
            <a class=3D"page-link" href=3D"https://lhartikk.github.io/about=
/">About</a>
           =20
         =20
           =20
           =20
         =20
           =20
           =20
         =20
           =20
           =20
         =20
        </div>
      </nav>
   =20
  </div>
</header>


    <main class=3D"page-content" aria-label=3D"Content">
      <div class=3D"wrapper">
        <article class=3D"post" itemscope=3D"" itemtype=3D"http://schema.or=
g/BlogPosting">

  <header class=3D"post-header">
    <h1 class=3D"post-title" itemprop=3D"name headline">#2: Proof of Work</=
h1>
  </header>

  <div class=3D"post-content" itemprop=3D"articleBody">
    <h3 id=3D"overview">Overview</h3>
<p>In this chapter we will implement a simple Proof-of-Work scheme to the t=
oy blockchain version. In the <a href=3D"https://lhartikk.github.io/jekyll/=
update/2017/07/14/chapter1.html">chapter1</a> version anyone could add a bl=
ock to the chain without a cost. With Proof-of-work we introduce a computat=
ional puzzle that needs to be solved, before a block can be added to the bl=
ockchain. Trying to solve this puzzle is commonly known as =E2=80=9Cmining=
=E2=80=9D.</p>

<p>With Proof-of-work we also can control (approximately) the interval on h=
ow often a block is introduced to the blockchain. This is done by changing =
the difficulty of the puzzle. If blocks are mined too often, the difficulty=
 of the puzzle will increase and vice versa.</p>

<p>It should be noted that we <strong>do not</strong>  yet introduce transa=
ctions in this chapter. This means there is actually no incentive for the m=
iners to generate a block. Generally in cryptocurrencies, the miner is rewa=
rded for finding a block, but this is not the case yet in our blockchain.</=
p>

<p>The full code that will be implemented in this chapter can be found <a h=
ref=3D"https://github.com/lhartikk/naivecoin/tree/chapter2">here</a>.</p>

<h3 id=3D"difficulty-nonce-and-the-proof-of-work-puzzle">Difficulty, nonce =
and the proof-of-work puzzle</h3>
<p>We will add two new properties to the block structure: <code>difficulty<=
/code> and <code>nonce</code>. To understand the meaning of those, we must =
first introduce the Proof-of-work puzzle.</p>

<p>The Proof-of-work puzzle is to find a block hash, that has a specific nu=
mber of zeros prefixing it. The <code>difficulty</code> property defines <s=
trong>how many prefixing zeros the block hash must have</strong>, in order =
for the block to be valid. The prefixing zeros are checked from the binary =
format of the hash.</p>

<p>Below are some examples of valid and non-valid hashes for various diffic=
ulties:</p>

<p><img src=3D"https://lhartikk.github.io/assets/difficulty_examples.png" a=
lt=3D"difficulty examples"></p>

<p>The code that checks that the hash is correct in terms of difficulty:</p=
>

<figure class=3D"highlight"><pre><code class=3D"language-ts" data-lang=3D"t=
s"><span></span><span class=3D"kr">const</span> <span class=3D"nx">hashMatc=
hesDifficulty</span> <span class=3D"o">=3D</span> <span class=3D"p">(</span=
><span class=3D"nx">hash</span>: <span class=3D"kt">string</span><span clas=
s=3D"p">,</span> <span class=3D"nx">difficulty</span>: <span class=3D"kt">n=
umber</span><span class=3D"p">)</span><span class=3D"o">:</span> <span clas=
s=3D"kr">boolean</span> <span class=3D"o">=3D&gt;</span> <span class=3D"p">=
{</span>
    <span class=3D"kr">const</span> <span class=3D"nx">hashInBinary</span>:=
 <span class=3D"kt">string</span> <span class=3D"o">=3D</span> <span class=
=3D"nx">hexToBinary</span><span class=3D"p">(</span><span class=3D"nx">hash=
</span><span class=3D"p">);</span>
    <span class=3D"kr">const</span> <span class=3D"nx">requiredPrefix</span=
>: <span class=3D"kt">string</span> <span class=3D"o">=3D</span> <span clas=
s=3D"s1">'0'</span><span class=3D"p">.</span><span class=3D"nx">repeat</spa=
n><span class=3D"p">(</span><span class=3D"nx">difficulty</span><span class=
=3D"p">);</span>
    <span class=3D"k">return</span> <span class=3D"nx">hashInBinary</span><=
span class=3D"p">.</span><span class=3D"nx">startsWith</span><span class=3D=
"p">(</span><span class=3D"nx">requiredPrefix</span><span class=3D"p">);</s=
pan>
<span class=3D"p">};</span></code></pre></figure>

<p>In order to find a hash that satisfies the difficulty, we must be able t=
o calculate different hashes for the same content of the block. This is don=
e by modifying the <code>nonce</code> parameter. Because SHA256 is a hash f=
unction, each time anything in the block changes, the hash will be complete=
ly different. =E2=80=9CMining=E2=80=9D is basically just trying a different=
 nonce until the block hash matches the difficulty.</p>

<p>Now that the <code>difficulty</code> and <code>nonce</code> are added, t=
he block structure looks like this:</p>

<figure class=3D"highlight"><pre><code class=3D"language-ts" data-lang=3D"t=
s"><span></span><span class=3D"kr">class</span> <span class=3D"nx">Block</s=
pan> <span class=3D"p">{</span>

    <span class=3D"kr">public</span> <span class=3D"nx">index</span>: <span=
 class=3D"kt">number</span><span class=3D"p">;</span>
    <span class=3D"kr">public</span> <span class=3D"nx">hash</span>: <span =
class=3D"kt">string</span><span class=3D"p">;</span>
    <span class=3D"kr">public</span> <span class=3D"nx">previousHash</span>=
: <span class=3D"kt">string</span><span class=3D"p">;</span>
    <span class=3D"kr">public</span> <span class=3D"nx">timestamp</span>: <=
span class=3D"kt">number</span><span class=3D"p">;</span>
    <span class=3D"kr">public</span> <span class=3D"nx">data</span>: <span =
class=3D"kt">string</span><span class=3D"p">;</span>
    <span class=3D"kr">public</span> <span class=3D"nx">difficulty</span>: =
<span class=3D"kt">number</span><span class=3D"p">;</span>
    <span class=3D"kr">public</span> <span class=3D"nx">nonce</span>: <span=
 class=3D"kt">number</span><span class=3D"p">;</span>

    <span class=3D"kr">constructor</span><span class=3D"p">(</span><span cl=
ass=3D"nx">index</span>: <span class=3D"kt">number</span><span class=3D"p">=
,</span> <span class=3D"nx">hash</span>: <span class=3D"kt">string</span><s=
pan class=3D"p">,</span> <span class=3D"nx">previousHash</span>: <span clas=
s=3D"kt">string</span><span class=3D"p">,</span>
                <span class=3D"nx">timestamp</span>: <span class=3D"kt">num=
ber</span><span class=3D"p">,</span> <span class=3D"nx">data</span>: <span =
class=3D"kt">string</span><span class=3D"p">,</span> <span class=3D"nx">dif=
ficulty</span>: <span class=3D"kt">number</span><span class=3D"p">,</span> =
<span class=3D"nx">nonce</span>: <span class=3D"kt">number</span><span clas=
s=3D"p">)</span> <span class=3D"p">{</span>
        <span class=3D"k">this</span><span class=3D"p">.</span><span class=
=3D"nx">index</span> <span class=3D"o">=3D</span> <span class=3D"nx">index<=
/span><span class=3D"p">;</span>
        <span class=3D"k">this</span><span class=3D"p">.</span><span class=
=3D"nx">previousHash</span> <span class=3D"o">=3D</span> <span class=3D"nx"=
>previousHash</span><span class=3D"p">;</span>
        <span class=3D"k">this</span><span class=3D"p">.</span><span class=
=3D"nx">timestamp</span> <span class=3D"o">=3D</span> <span class=3D"nx">ti=
mestamp</span><span class=3D"p">;</span>
        <span class=3D"k">this</span><span class=3D"p">.</span><span class=
=3D"nx">data</span> <span class=3D"o">=3D</span> <span class=3D"nx">data</s=
pan><span class=3D"p">;</span>
        <span class=3D"k">this</span><span class=3D"p">.</span><span class=
=3D"nx">hash</span> <span class=3D"o">=3D</span> <span class=3D"nx">hash</s=
pan><span class=3D"p">;</span>
        <span class=3D"k">this</span><span class=3D"p">.</span><span class=
=3D"nx">difficulty</span> <span class=3D"o">=3D</span> <span class=3D"nx">d=
ifficulty</span><span class=3D"p">;</span>
        <span class=3D"k">this</span><span class=3D"p">.</span><span class=
=3D"nx">nonce</span> <span class=3D"o">=3D</span> <span class=3D"nx">nonce<=
/span><span class=3D"p">;</span>
    <span class=3D"p">}</span>
<span class=3D"p">}</span></code></pre></figure>

<p>We must also remember to update the genesis block!</p>

<h3 id=3D"finding-a-block">Finding a block</h3>
<p>As described above, to find a valid block hash we must increase the nonc=
e as until we get a valid hash. To find a satisfying hash is completely a r=
andom process. We must just loop through enough nonces until we find a sati=
sfying hash:</p>

<figure class=3D"highlight"><pre><code class=3D"language-ts" data-lang=3D"t=
s"><span></span><span class=3D"kr">const</span> <span class=3D"nx">findBloc=
k</span> <span class=3D"o">=3D</span> <span class=3D"p">(</span><span class=
=3D"nx">index</span>: <span class=3D"kt">number</span><span class=3D"p">,</=
span> <span class=3D"nx">previousHash</span>: <span class=3D"kt">string</sp=
an><span class=3D"p">,</span> <span class=3D"nx">timestamp</span>: <span cl=
ass=3D"kt">number</span><span class=3D"p">,</span> <span class=3D"nx">data<=
/span>: <span class=3D"kt">string</span><span class=3D"p">,</span> <span cl=
ass=3D"nx">difficulty</span>: <span class=3D"kt">number</span><span class=
=3D"p">)</span><span class=3D"o">:</span> <span class=3D"nx">Block</span> <=
span class=3D"o">=3D&gt;</span> <span class=3D"p">{</span>
    <span class=3D"kd">let</span> <span class=3D"nx">nonce</span> <span cla=
ss=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</span>
    <span class=3D"k">while</span> <span class=3D"p">(</span><span class=3D=
"kc">true</span><span class=3D"p">)</span> <span class=3D"p">{</span>
        <span class=3D"kr">const</span> <span class=3D"nx">hash</span>: <sp=
an class=3D"kt">string</span> <span class=3D"o">=3D</span> <span class=3D"n=
x">calculateHash</span><span class=3D"p">(</span><span class=3D"nx">index</=
span><span class=3D"p">,</span> <span class=3D"nx">previousHash</span><span=
 class=3D"p">,</span> <span class=3D"nx">timestamp</span><span class=3D"p">=
,</span> <span class=3D"nx">data</span><span class=3D"p">,</span> <span cla=
ss=3D"nx">difficulty</span><span class=3D"p">,</span> <span class=3D"nx">no=
nce</span><span class=3D"p">);</span>
        <span class=3D"k">if</span> <span class=3D"p">(</span><span class=
=3D"nx">hashMatchesDifficulty</span><span class=3D"p">(</span><span class=
=3D"nx">hash</span><span class=3D"p">,</span> <span class=3D"nx">difficulty=
</span><span class=3D"p">))</span> <span class=3D"p">{</span>
            <span class=3D"k">return</span> <span class=3D"k">new</span> <s=
pan class=3D"nx">Block</span><span class=3D"p">(</span><span class=3D"nx">i=
ndex</span><span class=3D"p">,</span> <span class=3D"nx">hash</span><span c=
lass=3D"p">,</span> <span class=3D"nx">previousHash</span><span class=3D"p"=
>,</span> <span class=3D"nx">timestamp</span><span class=3D"p">,</span> <sp=
an class=3D"nx">data</span><span class=3D"p">,</span> <span class=3D"nx">di=
fficulty</span><span class=3D"p">,</span> <span class=3D"nx">nonce</span><s=
pan class=3D"p">);</span>
        <span class=3D"p">}</span>
        <span class=3D"nx">nonce</span><span class=3D"o">++</span><span cla=
ss=3D"p">;</span>
    <span class=3D"p">}</span>
<span class=3D"p">};</span></code></pre></figure>

<p>When the block is found, it is broadcasted to the network as was the cas=
e in chapter1.</p>

<h3 id=3D"consensus-on-the-difficulty">Consensus on the difficulty</h3>
<p>We have now the means to find and verify the hash for a given difficulty=
, but how is the difficulty determined? There must be a way for the nodes t=
o agree what the current difficulty is. For this we introduce some new rule=
s that we use to calculate the <em>current</em>  difficulty of the network.=
</p>

<p>Lets define the following new constants for the network:</p>
<ul>
  <li><code>BLOCK_GENERATION_INTERVAL</code>, defines how often a block sho=
uld be found. (in Bitcoin this value is 10 minutes)</li>
  <li><code>DIFFICULTY_ADJUSTMENT_INTERVAL</code>, defines how often the di=
fficulty should adjust to the increasing or decreasing network hashrate. (i=
n Bitcoin this value is 2016 blocks)</li>
</ul>

<p>We will set the block generation interval to 10s and difficulty adjustme=
nt to 10 blocks. These constants <strong>do not change</strong> over time a=
nd they are hard coded.</p>

<figure class=3D"highlight"><pre><code class=3D"language-ts" data-lang=3D"t=
s"><span></span><span class=3D"c1">// in seconds</span>
<span class=3D"kr">const</span> <span class=3D"nx">BLOCK_GENERATION_INTERVA=
L</span>: <span class=3D"kt">number</span> <span class=3D"o">=3D</span> <sp=
an class=3D"mi">10</span><span class=3D"p">;</span>

<span class=3D"c1">// in blocks</span>
<span class=3D"kr">const</span> <span class=3D"nx">DIFFICULTY_ADJUSTMENT_IN=
TERVAL</span>: <span class=3D"kt">number</span> <span class=3D"o">=3D</span=
> <span class=3D"mi">10</span><span class=3D"p">;</span></code></pre></figu=
re>

<p>Now we have the means to agree on a difficulty of the block. For every 1=
0 blocks that is generated, we check if the time that took to generate thos=
e blocks are larger or smaller than the expected time. The expected time is=
 calculated like this: <code>BLOCK_GENERATION_INTERVAL * DIFFICULTY_ADJUSTM=
ENT_INTERVAL</code>. The expected time represents the case where the hashra=
te matches <em>exactly</em> the current difficulty.</p>

<p>We either increase or decrease the difficulty by one if the time taken i=
s at least two times greater or smaller than the expected difficulty. The d=
ifficulty adjustment is handled by the following code:</p>

<figure class=3D"highlight"><pre><code class=3D"language-ts" data-lang=3D"t=
s"><span></span><span class=3D"kr">const</span> <span class=3D"nx">getDiffi=
culty</span> <span class=3D"o">=3D</span> <span class=3D"p">(</span><span c=
lass=3D"nx">aBlockchain</span>: <span class=3D"kt">Block</span><span class=
=3D"p">[])</span><span class=3D"o">:</span> <span class=3D"kt">number</span=
> <span class=3D"o">=3D&gt;</span> <span class=3D"p">{</span>
    <span class=3D"kr">const</span> <span class=3D"nx">latestBlock</span>: =
<span class=3D"kt">Block</span> <span class=3D"o">=3D</span> <span class=3D=
"nx">aBlockchain</span><span class=3D"p">[</span><span class=3D"nx">blockch=
ain</span><span class=3D"p">.</span><span class=3D"nx">length</span> <span =
class=3D"o">-</span> <span class=3D"mi">1</span><span class=3D"p">];</span>
    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"nx=
">latestBlock</span><span class=3D"p">.</span><span class=3D"nx">index</spa=
n> <span class=3D"o">%</span> <span class=3D"nx">DIFFICULTY_ADJUSTMENT_INTE=
RVAL</span> <span class=3D"o">=3D=3D=3D</span> <span class=3D"mi">0</span> =
<span class=3D"o">&amp;&amp;</span> <span class=3D"nx">latestBlock</span><s=
pan class=3D"p">.</span><span class=3D"nx">index</span> <span class=3D"o">!=
=3D=3D</span> <span class=3D"mi">0</span><span class=3D"p">)</span> <span c=
lass=3D"p">{</span>
        <span class=3D"k">return</span> <span class=3D"nx">getAdjustedDiffi=
culty</span><span class=3D"p">(</span><span class=3D"nx">latestBlock</span>=
<span class=3D"p">,</span> <span class=3D"nx">aBlockchain</span><span class=
=3D"p">);</span>
    <span class=3D"p">}</span> <span class=3D"k">else</span> <span class=3D=
"p">{</span>
        <span class=3D"k">return</span> <span class=3D"nx">latestBlock</spa=
n><span class=3D"p">.</span><span class=3D"nx">difficulty</span><span class=
=3D"p">;</span>
    <span class=3D"p">}</span>
<span class=3D"p">};</span>

<span class=3D"kr">const</span> <span class=3D"nx">getAdjustedDifficulty</s=
pan> <span class=3D"o">=3D</span> <span class=3D"p">(</span><span class=3D"=
nx">latestBlock</span>: <span class=3D"kt">Block</span><span class=3D"p">,<=
/span> <span class=3D"nx">aBlockchain</span>: <span class=3D"kt">Block</spa=
n><span class=3D"p">[])</span> <span class=3D"o">=3D&gt;</span> <span class=
=3D"p">{</span>
    <span class=3D"kr">const</span> <span class=3D"nx">prevAdjustmentBlock<=
/span>: <span class=3D"kt">Block</span> <span class=3D"o">=3D</span> <span =
class=3D"nx">aBlockchain</span><span class=3D"p">[</span><span class=3D"nx"=
>blockchain</span><span class=3D"p">.</span><span class=3D"nx">length</span=
> <span class=3D"o">-</span> <span class=3D"nx">DIFFICULTY_ADJUSTMENT_INTER=
VAL</span><span class=3D"p">];</span>
    <span class=3D"kr">const</span> <span class=3D"nx">timeExpected</span>:=
 <span class=3D"kt">number</span> <span class=3D"o">=3D</span> <span class=
=3D"nx">BLOCK_GENERATION_INTERVAL</span> <span class=3D"o">*</span> <span c=
lass=3D"nx">DIFFICULTY_ADJUSTMENT_INTERVAL</span><span class=3D"p">;</span>
    <span class=3D"kr">const</span> <span class=3D"nx">timeTaken</span>: <s=
pan class=3D"kt">number</span> <span class=3D"o">=3D</span> <span class=3D"=
nx">latestBlock</span><span class=3D"p">.</span><span class=3D"nx">timestam=
p</span> <span class=3D"o">-</span> <span class=3D"nx">prevAdjustmentBlock<=
/span><span class=3D"p">.</span><span class=3D"nx">timestamp</span><span cl=
ass=3D"p">;</span>
    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"nx=
">timeTaken</span> <span class=3D"o">&lt;</span> <span class=3D"nx">timeExp=
ected</span> <span class=3D"o">/</span> <span class=3D"mi">2</span><span cl=
ass=3D"p">)</span> <span class=3D"p">{</span>
        <span class=3D"k">return</span> <span class=3D"nx">prevAdjustmentBl=
ock</span><span class=3D"p">.</span><span class=3D"nx">difficulty</span> <s=
pan class=3D"o">+</span> <span class=3D"mi">1</span><span class=3D"p">;</sp=
an>
    <span class=3D"p">}</span> <span class=3D"k">else</span> <span class=3D=
"k">if</span> <span class=3D"p">(</span><span class=3D"nx">timeTaken</span>=
 <span class=3D"o">&gt;</span> <span class=3D"nx">timeExpected</span> <span=
 class=3D"o">*</span> <span class=3D"mi">2</span><span class=3D"p">)</span>=
 <span class=3D"p">{</span>
        <span class=3D"k">return</span> <span class=3D"nx">prevAdjustmentBl=
ock</span><span class=3D"p">.</span><span class=3D"nx">difficulty</span> <s=
pan class=3D"o">-</span> <span class=3D"mi">1</span><span class=3D"p">;</sp=
an>
    <span class=3D"p">}</span> <span class=3D"k">else</span> <span class=3D=
"p">{</span>
        <span class=3D"k">return</span> <span class=3D"nx">prevAdjustmentBl=
ock</span><span class=3D"p">.</span><span class=3D"nx">difficulty</span><sp=
an class=3D"p">;</span>
    <span class=3D"p">}</span>
<span class=3D"p">};</span></code></pre></figure>

<h3 id=3D"timestamp-validation">Timestamp validation</h3>
<p>In the chapter1 version of the blockchain, the timestamp did not have an=
y role nor validation. In fact it could be anything the client decided to g=
enerate. This changes now that the difficulty adjustment is introduced as t=
he <code>timeTaken</code> variable (in the previous code snippet) is calcul=
ated based on the timestamps of the blocks.</p>

<p>To mitigate the attack where a false timestamp is introduced in order to=
 manipulate the difficulty the following rules is introduced:</p>

<ul>
  <li>A block is valid, if the timestamp is at most 1 min in the future fro=
m <strong>the time we perceive</strong>.</li>
  <li>A block in the chain is valid, if the timestamp is at most 1 min in t=
he past of the previous block.</li>
</ul>

<figure class=3D"highlight"><pre><code class=3D"language-ts" data-lang=3D"t=
s"><span></span><span class=3D"kr">const</span> <span class=3D"nx">isValidT=
imestamp</span> <span class=3D"o">=3D</span> <span class=3D"p">(</span><spa=
n class=3D"nx">newBlock</span>: <span class=3D"kt">Block</span><span class=
=3D"p">,</span> <span class=3D"nx">previousBlock</span>: <span class=3D"kt"=
>Block</span><span class=3D"p">)</span><span class=3D"o">:</span> <span cla=
ss=3D"kr">boolean</span> <span class=3D"o">=3D&gt;</span> <span class=3D"p"=
>{</span>
    <span class=3D"k">return</span> <span class=3D"p">(</span> <span class=
=3D"nx">previousBlock</span><span class=3D"p">.</span><span class=3D"nx">ti=
mestamp</span> <span class=3D"o">-</span> <span class=3D"mi">60</span> <spa=
n class=3D"o">&lt;</span> <span class=3D"nx">newBlock</span><span class=3D"=
p">.</span><span class=3D"nx">timestamp</span> <span class=3D"p">)</span>
        <span class=3D"o">&amp;&amp;</span> <span class=3D"nx">newBlock</sp=
an><span class=3D"p">.</span><span class=3D"nx">timestamp</span> <span clas=
s=3D"o">-</span> <span class=3D"mi">60</span> <span class=3D"o">&lt;</span>=
 <span class=3D"nx">getCurrentTimestamp</span><span class=3D"p">();</span>
<span class=3D"p">};</span></code></pre></figure>

<h3 id=3D"cumulative-difficulty">Cumulative difficulty</h3>
<p>In the chapter1 version of the blockchain, we chose always the =E2=80=9C=
longest=E2=80=9D blockchain to be the valid. This must change now that diff=
iculty is introduced. For now on the =E2=80=9Ccorrect=E2=80=9D chain is not=
 the =E2=80=9Clongest=E2=80=9D chain, but the chain with the <strong>most c=
umulative difficulty</strong>. In other words, the correct chain is the cha=
in which required most resources (=3D hashRate * time) to produce.</p>

<p>To get the cumulative difficulty of a chain we calculate <code>2^difficu=
lty</code> for each block and take a sum of all those numbers. We have to u=
se the <code>2^difficulty</code> as we chose the difficulty to represent th=
e number of zeros that must prefix the hash in binary format. For instance,=
 if we compare the difficulties of 5 and 11, it requires 2^(11-5) =3D 2^6 t=
imes more work to find a block with latter difficulty.</p>

<p>In the below example, the =E2=80=9CChain B=E2=80=9D is the =E2=80=9Ccorr=
ect=E2=80=9D chain although it has fever blocks:
<img src=3D"https://lhartikk.github.io/assets/Cumulative_difficulties.png" =
alt=3D"Cumulative difficulty"></p>

<p>Only the difficulty of the block matters, not the actual hash (given the=
 hash is valid). For example, if the difficulty is 4 and the block hash is =
000000a34c=E2=80=A6 (=3D also satisfying the difficulty of 6), only the dif=
ficulty of 4 is taken into account when calculating the cumulative difficul=
ty.</p>

<p>This property is also known as =E2=80=9CNakamoto consensus=E2=80=9D and =
it is one of the most important inventions Satoshi made, when s/he invented=
 Bitcoin. In case of forks, miners must choose on which chain the they deci=
de put their current resources (=3D hashRate). As it is in the interest of =
the miners to produce such block that will be included in the blockchain, t=
he miners are incentivized to eventually to choose the same chain.</p>

<h3 id=3D"conclusions">Conclusions</h3>
<p>An important property that a Proof-of-work puzzle must have is that it i=
s difficult to solve, but easy to verify. Finding specific SHA256 hashes is=
 a good and simple example of such problem.</p>

<p>We implemented the difficulty aspect and nodes must now =E2=80=9Cmine=E2=
=80=9D in order to add new blocks to the chain. In the <a href=3D"https://l=
hartikk.github.io/jekyll/update/2017/07/12/chapter3.html">next chapter</a> =
we will implement transactions.</p>

<p>The full code for this chapter can be found <a href=3D"https://github.co=
m/lhartikk/naivecoin/tree/chapter2">here</a>.</p>

<p><a href=3D"https://lhartikk.github.io/jekyll/update/2017/07/12/chapter3.=
html">To chapter3</a></p>


  </div>

 =20
</article>

      </div>
    </main>

    <footer class=3D"site-footer">


</footer>


 =20


</body></html>
------MultipartBoundary--4wtXzPGbgXDuynCt5x0RSf5ROLbAFwH0HvanxjwzH5----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://lhartikk.github.io/assets/main.css

@charset "utf-8";

body, h1, h2, h3, h4, h5, h6, p, blockquote, pre, hr, dl, dd, ol, ul, figur=
e { margin: 0px; padding: 0px; }

body { font: 400 16px / 1.5 "Helvetica Neue", Helvetica, Arial, sans-serif;=
 color: rgb(17, 17, 17); background-color: rgb(253, 253, 253); text-size-ad=
just: 100%; font-feature-settings: "kern"; font-kerning: normal; }

h1, h2, h3, h4, h5, h6, p, blockquote, pre, ul, ol, dl, figure, .highlight =
{ margin-bottom: 15px; }

img { max-width: 100%; vertical-align: middle; }

figure > img { display: block; }

figcaption { font-size: 14px; }

ul, ol { margin-left: 30px; }

li > ul, li > ol { margin-bottom: 0px; }

h1, h2, h3, h4, h5, h6 { font-weight: 400; }

a { color: rgb(42, 122, 226); text-decoration: none; }

a:visited { color: rgb(23, 86, 169); }

a:hover { color: rgb(17, 17, 17); text-decoration: underline; }

.social-media-list a:hover { text-decoration: none; }

.social-media-list a:hover .username { text-decoration: underline; }

blockquote { color: rgb(130, 130, 130); border-left: 4px solid rgb(232, 232=
, 232); padding-left: 15px; font-size: 18px; letter-spacing: -1px; font-sty=
le: italic; }

blockquote > :last-child { margin-bottom: 0px; }

pre, code { font-size: 15px; border: 1px solid rgb(232, 232, 232); border-r=
adius: 3px; background-color: rgb(238, 238, 255); }

code { padding: 1px 5px; }

pre { padding: 8px 12px; overflow-x: auto; }

pre > code { border: 0px; padding-right: 0px; padding-left: 0px; }

.wrapper { max-width: calc(740px); margin-right: auto; margin-left: auto; p=
adding-right: 30px; padding-left: 30px; }

@media screen and (max-width: 800px) {
  .wrapper { max-width: calc(770px); padding-right: 15px; padding-left: 15p=
x; }
}

.wrapper::after, .footer-col-wrapper::after { content: ""; display: table; =
clear: both; }

.icon > svg { display: inline-block; vertical-align: middle; }

.icon > svg path { fill: rgb(130, 130, 130); }

.social-media-list .icon { padding-right: 5px; }

.social-media-list li + li { padding-top: 5px; }

.site-header { border-top: 5px solid rgb(66, 66, 66); border-bottom: 1px so=
lid rgb(232, 232, 232); min-height: 55.95px; position: relative; }

.site-title { font-size: 26px; font-weight: 300; line-height: 54px; letter-=
spacing: -1px; margin-bottom: 0px; float: left; }

.site-title, .site-title:visited { color: rgb(66, 66, 66); }

.site-nav { float: right; line-height: 54px; }

.site-nav .nav-trigger { display: none; }

.site-nav .menu-icon { display: none; }

.site-nav .page-link { color: rgb(17, 17, 17); line-height: 1.5; }

.site-nav .page-link:not(:last-child) { margin-right: 20px; }

@media screen and (max-width: 600px) {
  .site-nav { position: absolute; top: 9px; right: 15px; background-color: =
rgb(253, 253, 253); border: 1px solid rgb(232, 232, 232); border-radius: 5p=
x; text-align: right; }
  .site-nav label[for=3D"nav-trigger"] { display: block; float: right; widt=
h: 36px; height: 36px; z-index: 2; cursor: pointer; }
  .site-nav .menu-icon { display: block; float: right; width: 36px; height:=
 26px; line-height: 0; padding-top: 10px; text-align: center; }
  .site-nav .menu-icon > svg path { fill: rgb(66, 66, 66); }
  .site-nav input ~ .trigger { clear: both; display: none; }
  .site-nav input:checked ~ .trigger { display: block; padding-bottom: 5px;=
 }
  .site-nav .page-link { display: block; padding: 5px 10px; margin-left: 20=
px; }
  .site-nav .page-link:not(:last-child) { margin-right: 0px; }
}

.site-footer { border-top: 1px solid rgb(232, 232, 232); padding: 30px 0px;=
 }

.footer-heading { font-size: 18px; margin-bottom: 15px; }

.contact-list, .social-media-list { list-style: none; margin-left: 0px; }

.footer-col-wrapper { font-size: 15px; color: rgb(130, 130, 130); margin-le=
ft: -15px; }

.footer-col { float: left; margin-bottom: 15px; padding-left: 15px; }

.footer-col-1 { width: calc(35% - 15px); }

.footer-col-2 { width: calc(20% - 15px); }

.footer-col-3 { width: calc(45% - 15px); }

@media screen and (max-width: 800px) {
  .footer-col-1, .footer-col-2 { width: calc(50% - 15px); }
  .footer-col-3 { width: calc(100% - 15px); }
}

@media screen and (max-width: 600px) {
  .footer-col { float: none; width: calc(100% - 15px); }
}

.page-content { padding: 30px 0px; }

.page-heading { font-size: 20px; }

.post-list { margin-left: 0px; list-style: none; }

.post-list > li { margin-bottom: 30px; }

.post-meta { font-size: 14px; color: rgb(130, 130, 130); }

.post-link { display: block; font-size: 24px; }

.post-header { margin-bottom: 30px; }

.post-title { font-size: 42px; letter-spacing: -1px; line-height: 1; }

@media screen and (max-width: 800px) {
  .post-title { font-size: 36px; }
}

.post-content { margin-bottom: 30px; }

.post-content h2 { font-size: 32px; }

@media screen and (max-width: 800px) {
  .post-content h2 { font-size: 28px; }
}

.post-content h3 { font-size: 26px; }

@media screen and (max-width: 800px) {
  .post-content h3 { font-size: 22px; }
}

.post-content h4 { font-size: 20px; }

@media screen and (max-width: 800px) {
  .post-content h4 { font-size: 18px; }
}

.highlight { background: rgb(255, 255, 255); }

.highlighter-rouge .highlight { background: rgb(238, 238, 255); }

.highlight .c { color: rgb(153, 153, 136); font-style: italic; }

.highlight .err { color: rgb(166, 23, 23); background-color: rgb(227, 210, =
210); }

.highlight .k { font-weight: bold; }

.highlight .o { font-weight: bold; }

.highlight .cm { color: rgb(153, 153, 136); font-style: italic; }

.highlight .cp { color: rgb(153, 153, 153); font-weight: bold; }

.highlight .c1 { color: rgb(153, 153, 136); font-style: italic; }

.highlight .cs { color: rgb(153, 153, 153); font-weight: bold; font-style: =
italic; }

.highlight .gd { color: rgb(0, 0, 0); background-color: rgb(255, 221, 221);=
 }

.highlight .gd .x { color: rgb(0, 0, 0); background-color: rgb(255, 170, 17=
0); }

.highlight .ge { font-style: italic; }

.highlight .gr { color: rgb(170, 0, 0); }

.highlight .gh { color: rgb(153, 153, 153); }

.highlight .gi { color: rgb(0, 0, 0); background-color: rgb(221, 255, 221);=
 }

.highlight .gi .x { color: rgb(0, 0, 0); background-color: rgb(170, 255, 17=
0); }

.highlight .go { color: rgb(136, 136, 136); }

.highlight .gp { color: rgb(85, 85, 85); }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(170, 170, 170); }

.highlight .gt { color: rgb(170, 0, 0); }

.highlight .kc { font-weight: bold; }

.highlight .kd { font-weight: bold; }

.highlight .kp { font-weight: bold; }

.highlight .kr { font-weight: bold; }

.highlight .kt { color: rgb(68, 85, 136); font-weight: bold; }

.highlight .m { color: rgb(0, 153, 153); }

.highlight .s { color: rgb(221, 17, 68); }

.highlight .na { color: rgb(0, 128, 128); }

.highlight .nb { color: rgb(0, 134, 179); }

.highlight .nc { color: rgb(68, 85, 136); font-weight: bold; }

.highlight .no { color: rgb(0, 128, 128); }

.highlight .ni { color: rgb(128, 0, 128); }

.highlight .ne { color: rgb(153, 0, 0); font-weight: bold; }

.highlight .nf { color: rgb(153, 0, 0); font-weight: bold; }

.highlight .nn { color: rgb(85, 85, 85); }

.highlight .nt { color: rgb(0, 0, 128); }

.highlight .nv { color: rgb(0, 128, 128); }

.highlight .ow { font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight .mf { color: rgb(0, 153, 153); }

.highlight .mh { color: rgb(0, 153, 153); }

.highlight .mi { color: rgb(0, 153, 153); }

.highlight .mo { color: rgb(0, 153, 153); }

.highlight .sb { color: rgb(221, 17, 68); }

.highlight .sc { color: rgb(221, 17, 68); }

.highlight .sd { color: rgb(221, 17, 68); }

.highlight .s2 { color: rgb(221, 17, 68); }

.highlight .se { color: rgb(221, 17, 68); }

.highlight .sh { color: rgb(221, 17, 68); }

.highlight .si { color: rgb(221, 17, 68); }

.highlight .sx { color: rgb(221, 17, 68); }

.highlight .sr { color: rgb(0, 153, 38); }

.highlight .s1 { color: rgb(221, 17, 68); }

.highlight .ss { color: rgb(153, 0, 115); }

.highlight .bp { color: rgb(153, 153, 153); }

.highlight .vc { color: rgb(0, 128, 128); }

.highlight .vg { color: rgb(0, 128, 128); }

.highlight .vi { color: rgb(0, 128, 128); }

.highlight .il { color: rgb(0, 153, 153); }
------MultipartBoundary--4wtXzPGbgXDuynCt5x0RSf5ROLbAFwH0HvanxjwzH5------
